import os
from base64 import b64encode, b64decode
from Crypto.PublicKey import RSA
from Crypto.Cipher import PKCS1_OAEP, AES
from Crypto.Hash import SHA256
from django.conf import settings
import redis
import json
from rest_framework import status
from rest_framework.exceptions import APIException

redis_instance = redis.StrictRedis(host=settings.CACHING_REDIS_HOST, port=settings.CACHING_REDIS_PORT, db=0)
# redis is used to keep in memory keys and nonces, retrieved by a session id sent to clients


def create_json(key, nonce_iv):
    """
    :param key:
    :param nonce_iv:
    :return: a json object containing the base64 parsed data, to be sent to a client.
    """
    data_dict = {
        'key': b64encode(key).decode(),
        'nonce_iv': b64encode(nonce_iv).decode()
    }
    return json.dumps(data_dict)


def create_aes_key():
    """
    create key and nonce to be used for encryption on client
    create session key to retrieve data stored in Redis
    :return: json containing aes data and session_id
    """
    key = SHA256.new(os.urandom(32)).digest()
    nonce_iv = os.urandom(12)
    session_id = b64encode(os.urandom(8)).decode()
    json_data = create_json(key, nonce_iv)
    redis_instance.set(session_id, json_data, ex=30)
    return json_data, session_id


def encrypt(public_key):
    """
    :param public_key: rsa public key, generated by clients
    :return: rsa encrypted aes data and session key
    """
    message, session_id = create_aes_key()
    rsa_public_key = RSA.import_key(b64decode(public_key))
    cipher = PKCS1_OAEP.new(key=rsa_public_key, hashAlgo=SHA256)
    encrypted_text = cipher.encrypt(message.encode())
    return b64encode(encrypted_text), session_id


def decrypt_credentials(encrypted_data, session_id):
    """
    :param encrypted_data: aes encrypted data coming from clients
    :param session_id: session id to retrieve aes key and nonce from redis
    :return: decrypted client data : user, password and expires date
    """
    redis_data = redis_instance.get(session_id)
    if redis_data is None:
        raise SessionTimeoutException()
    json_aes_data = json.loads(redis_data)
    key = json_aes_data.get("key")
    nonce_iv = json_aes_data.get("nonce_iv")
    key = b64decode(key.encode())
    nonce_iv = b64decode(nonce_iv.encode())
    decoded_data = b64decode(encrypted_data)  # java encryption library append tag at the end of encrypted data
    data = decoded_data[:-16]
    tag = decoded_data[-16:]
    cipher = AES.new(key, AES.MODE_GCM, nonce=nonce_iv)
    cleartext = cipher.decrypt_and_verify(data, tag)
    json_data = json.loads(cleartext)
    return json_data.get('user'), json_data.get('password'), json_data.get('expires')


class SessionTimeoutException(APIException):
    status_code = status.HTTP_408_REQUEST_TIMEOUT
    default_detail = 'Expired session id'
    default_code = 'timeout'
